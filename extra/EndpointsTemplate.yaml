AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This is a template to automatically deploy the excersice given in Section 5 about endpoints
  This template was created as a challenge and eliminate the human error component.
  It will create 2 VPCs and 2 subnets, use an ELB, endpoint-service, and 2 micro instances.
  Also the auto-rollback feature is great.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  InstanceType:
      Description: Select your Free Tier type. (This will most likely be t2.micro, however if you are using Stockholm it must be t3.micro)
      Type: String
      Default: t3.micro
      AllowedValues:
        - t2.micro
        - t3.micro
  S3BucketName:
    Type: String
    Default: scribbd
  # UserScript:
  #   Description: The script provided by Neal, don't forget to change to your own bucket!
  #   Type: String
  #   Value: |
  #     #!/bin/bash
  #     yum update -y
  #     yum install httpd -y
  #     systemctl start httpd
  #     systemctl enable httpd
  #     cd /var/www/html
  #     aws s3 cp s3://$buck/names.csv ./
  #     aws s3 cp s3://$buck/index.txt ./
  #     EC2NAME=`cat ./names.csv|sort -R|head -n 1|xargs` 
  #     sed "s/INSTANCE/$EC2NAME/" index.txt > index.html

Resources:
#Setting up the networking of both VPCs
#VPC with public subnet and IG
  VPCPublic:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: True
      Tags: 
      - Key: "Name"
        Value: "Public VPC"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCPublic
      InternetGatewayId: !Ref InternetGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.0.0.0/24"
      VpcId: !Ref VPCPublic
      MapPublicIpOnLaunch: True
#Setup RouteTables with public access
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCPublic
#Setup Public Route Rule
  PublicRouteToInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: "0.0.0.0/0" #Internet
      GatewayId: !Ref InternetGateway
  PublicAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnetA

#VPC without public subnet (also no IG)
  VPCPrivate:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      Tags: 
      - Key: "Name"
        Value: "Private VPC"
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCPrivate
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.0.0.0/24"
      VpcId: !Ref VPCPrivate
  PrivateAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnetA

#Setting up EC2 resources
#Security Groups
  PublicSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enables SSH Ingress and HTTP outgress
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0" #All
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0" #All
      VpcId: !Ref VPCPublic
  PrivateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Only allows HTML Ingress from a Network Load Balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0" #All
      VpcId: !Ref VPCPrivate
  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      RoleName: S3StackAccessRole
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: S3StackAccessRole
      Roles:
        - !Ref S3AccessRole
#EC2 instances
  EC2Public:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      #CreditSpecification: standard
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref PublicSecurityGroup
      Tags: 
      - Key: "Name"
        Value: "Public Server"
  
  WebserverPrivate:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      #CreditSpecification: standard
      SubnetId: !Ref PrivateSubnetA
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      IamInstanceProfile: !Ref WebServerInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
          cd /var/www/html
          aws s3 cp s3://${ S3BucketName }/names.csv ./
          aws s3 cp s3://${ S3BucketName }/index.txt ./
          EC2NAME=`cat ./names.csv|sort -R|head -n 1|xargs` 
          sed "s/INSTANCE/$EC2NAME/" index.txt > index.html
      Tags: 
      - Key: "Name"
        Value: "Private WebServer"

#Setting up the Endpoint Service resources
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internal
      Subnets:
        - !Ref PrivateSubnetA
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: TCP
      Targets:
        - Id: !Ref WebserverPrivate
      VpcId: !Ref VPCPrivate
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: TCP
#Setting up the Endpoint Service
  EndpointService:
    Type: AWS::EC2::VPCEndpointService
    Properties: 
      AcceptanceRequired: True
      NetworkLoadBalancerArns: 
        - !Ref ElasticLoadBalancer
  EndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.vpce.${ AWS::Region }.${ EndpointService }
      VpcId: !Ref VPCPublic
      SubnetIds:
        - !Ref PublicSubnetA
  # EndpointPermission:
  #   Type: AWS::EC2::VPCEndpointServicePermissions
  #   DependsOn:
  #     - EndPoint
  #   Properties:
  #     ServiceId: !Ref EndpointService
  #     AllowedPrincipals:
  #       - '*'
  
#Give info to user
Outputs:
  ServiceNameCheck:
    Description: This is the endpoint name that I generated.
    Value: !Sub com.amazonaws.vpce.${ AWS::Region }.${ EndpointService }
  PublicIP:
    Description: This is the public instance
    Value: !GetAtt EC2Public.PublicIp
  SSHCommand:
    Description: CopyPaste in your ssh console
    Value: !Sub ssh -i ${ KeyName }.pem ec2-user@${ EC2Public.PublicIp }
  EndpointDNSName:
    Description: What you get.
    Value: !Join 
        - ','
        - !GetAtt EndPoint.DnsEntries